---
import { app } from "../firebase/server";
import { getAuth } from "firebase-admin/auth";
import Layout from "../layouts/Layout.astro";

const auth = getAuth(app);

/* Check current session */
if (!Astro.cookies.has("__session")) {
  return Astro.redirect("/signin");
}
const sessionCookie = Astro.cookies.get("__session")?.value ?? "";
const decodedCookie = await auth.verifySessionCookie(sessionCookie);
const user = await auth.getUser(decodedCookie.uid);

if (!user) {
  return Astro.redirect("/signin");
}
---

<Layout title="dashboard">
  <div
    class="min-h-screen flex flex-col items-center justify-center text-yellow01 text-shadow-glow p-8"
  >
    <h1 class="text-2xl md:text-4xl font-bold mb-6 font-cmu">
      Welcome {user.displayName}
    </h1>
    <p class="text-lg md:text-xl mb-4 font-cmu">We are happy to see you here</p>
    <form
      action=`/api/db/upload/${user.uid}`
      method="post"
      enctype="multipart/form-data"
      class="w-full max-w-md px-4 py-6 bg-blue02 rounded shadow-lg"
    >
      <label for="description" class="block text-sm font-medium"
        >Description:</label
      >
      <input
        type="text"
        id="description"
        name="description"
        class="w-full mt-1 p-2 border border-gray-300 rounded"
      /><br />
      <label for="image" class="block text-sm font-medium mt-4"
        >Select image:</label
      >
      <input
        type="file"
        id="image"
        name="image"
        class="w-full mt-1 p-2rounded"
      /><br />
      <button
        type="submit"
        class="w-full mt-4 p-2 bg-blue01 text-yellow01 rounded hover:bg-blue02"
        >Upload</button
      >
    </form>
    <form action="/api/auth/signout" class="absolute top-4 right-4">
      <button
        type="submit"
        class="p-2 bg-blue01 text-yellow01 rounded hover:bg-blue02"
        >Sign out</button
      >
    </form>
  </div>
</Layout>

<script>
  import { getAuth } from "firebase-admin/auth";
  import { app } from "../firebase/client";

  const form = document.querySelector("form") as HTMLFormElement;
  const imageInput = document.getElementById("image") as HTMLInputElement;
  const auth = getAuth(app);

  const sessionCookie = Astro.cookies.get("__session")?.value ?? "";
  const decodedCookie = await auth.verifySessionCookie(sessionCookie);
  const user = await auth.getUser(decodedCookie.uid);
  const maxFileSize = 4 * 1024 * 1024; // 4MB
  form.addEventListener("submit", async (event) => {
    event.preventDefault();
    const descriptionInput = document.getElementById(
      "description"
    ) as HTMLInputElement;
    const description = descriptionInput.value.trim();
    if (!description || !imageInput.files || imageInput.files.length === 0) {
      alert("Please fill in all fields.");
      return;
    }
    const file = imageInput.files[0];
    if (file.size > maxFileSize) {
      alert("Image size exceeds 4MB. Please choose a smaller image.");
      return;
    }
    try {
      const resizedImage = await resizeImage(file);
      const formData = new FormData();
      formData.append("description", description);
      formData.append("image", resizedImage, file.name);
      fetch(`/api/db/upload/${user.uid}`, {
        method: "POST",
        body: formData,
      }).then((response) => {
        if (response.ok) {
          // Redirect or show success message
        } else {
          // Handle error
        }
      });
    } catch (error) {
      console.error("Error resizing image:", error);
    }
  });

  function resizeImage(file: File): Promise<Blob> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (event) => {
        const img = new Image();
        img.onload = () => {
          const canvas = document.createElement("canvas");
          const ctx = canvas.getContext("2d");
          if (!ctx) {
            reject(new Error("Failed to create canvas context"));
            return;
          }
          canvas.width = 800; // Set your desired width
          canvas.height = (canvas.width / img.width) * img.height;
          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
          canvas.toBlob(
            (blob) => {
              if (!blob) {
                reject(new Error("Failed to create Blob"));
                return;
              }
              resolve(blob);
            },
            "image/jpeg",
            0.9
          ); // Adjust the quality (0.0 - 1.0) as needed
        };
        if (event.target) {
          img.src = event.target.result as string;
        }
      };
      reader.readAsDataURL(file);
    });
  }
</script>

---
import { app } from "../firebase/server";
import { getAuth } from "firebase-admin/auth";
import Layout from "../layouts/Layout.astro";

const auth = getAuth(app);

/* Check current session */
if (!Astro.cookies.has("__session")) {
  return Astro.redirect("/signin");
}
const sessionCookie = Astro.cookies.get("__session")?.value ?? "";
const decodedCookie = await auth.verifySessionCookie(sessionCookie);
const user = await auth.getUser(decodedCookie.uid);
const uid = user.uid;

if (!user) {
  return Astro.redirect("/signin");
}
---

<Layout title="dashboard">
  <div
    class="min-h-screen flex flex-col items-center justify-center text-yellow01 text-shadow-glow p-8"
  >
    <h1 class="text-2xl md:text-4xl font-bold mb-6 font-cmu">
      Welcome {user.displayName}
    </h1>
    <p class="text-lg md:text-xl mb-4 font-cmu">We are happy to see you here</p>
    <form
      enctype="multipart/form-data"
      class="w-full max-w-md px-4 py-6 bg-blue02 rounded shadow-lg"
    >
      <label
        for="description"
        class="block text-sm font-medium text-yellow01 mb-2">Description:</label
      >
      <input
        type="text"
        id="description"
        name="description"
        class="w-full text-black p-2 border border-gray-300 rounded bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
      />
      <label
        for="image"
        class="block text-sm font-medium text-yellow01 mt-4 mb-2"
        >Select image:</label
      >
      <div class="relative">
        <input type="file" id="image" name="image" class="hidden" />
        <button
          type="button"
          class="w-full text-black font-cmu p-2 border border-gray-300 rounded bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent cursor-pointer"
          onclick="document.getElementById('image').click()"
        >
          Choose File
        </button>
        <span id="file-name" class="block mt-2 text-sm text-gray-500"></span>
      </div>
      <button
        type="submit"
        class="w-full font-cmu font-bold mt-4 p-2 bg-blue01 text-yellow01 rounded hover:bg-blue02 transition duration-300"
      >
        Upload
      </button>
    </form>
    <form action="/api/auth/signout" class="absolute top-4 right-4">
      <button
        type="submit"
        class="p-2 bg-blue01 text-yellow01 rounded hover:bg-blue02 transition duration-300"
      >
        Sign out
      </button>
    </form>
    <!-- Loader element -->
    <div
      id="loader"
      class="hidden fixed inset-0 flex items-center justify-center bg-black bg-opacity-50"
    >
      <div class="loader"></div>
    </div>
  </div>
  <div class="hidden" id="uid">{uid}</div>
  <script type="text/javascript">
    document.addEventListener("DOMContentLoaded", () => {
      const uid = document.getElementById("uid");
      const form = document.querySelector("form");
      const imageInput = document.getElementById("image");
      const descriptionInput = document.getElementById("description");
      const loader = document.getElementById("loader");
      const fileName = document.getElementById("file-name");

      if (imageInput) {
        imageInput.addEventListener("change", () => {
          fileName.textContent =
            imageInput.files.length > 0 ? imageInput.files[0].name : "";
        });
      }

      if (form && imageInput && descriptionInput) {
        form.addEventListener("submit", async (event) => {
          event.preventDefault();

          const description = descriptionInput.value.trim();

          if (
            !description ||
            !imageInput.files ||
            imageInput.files.length === 0
          ) {
            alert("Please fill in all fields.");
            return;
          }

          loader.classList.remove("hidden"); // Show loader

          const imageFile = imageInput.files[0];
          const reader = new FileReader();

          reader.onloadend = async () => {
            const base64Image = reader.result?.toString().split(",")[1];

            if (!base64Image) {
              alert("Error reading image file.");
              loader.classList.add("hidden"); // Hide loader on error
              return;
            }

            try {
              const response = await fetch(
                "https://smo-api.bunyawatapp37204.workers.dev/images/upload",
                {
                  method: "PUT",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({
                    body: base64Image,
                    width: 300,
                    height: 300,
                  }),
                }
              );

              if (!response.ok) {
                throw new Error("Failed to upload image");
              }

              const jsonData = await response.json();
              const img =
                "https://smo-api.bunyawatapp37204.workers.dev/images/" +
                jsonData.key;

              const formData = new FormData();
              formData.append("description", description);
              formData.append("image_url", img); // Submit the image URL instead of the image file

              const result = await fetch(`/api/db/upload/${uid.innerHTML}`, {
                method: "POST",
                body: formData,
              });

              if (!result.ok) {
                throw new Error("Failed to upload data");
              }

              // Redirect or update the UI as needed
              window.location.href = "/view";
            } catch (error) {
              alert("Error uploading data: " + error.message);
            } finally {
              loader.classList.add("hidden"); // Hide loader after submission
            }
          };

          reader.readAsDataURL(imageFile);
        });
      } else {
        console.error("Form elements not found.");
      }
    });
  </script>
</Layout>

<style>
  /* Add loader styles */
  .loader {
    border: 8px solid #f3f3f3; /* Light grey */
    border-top: 8px solid #3498db; /* Blue */
    border-radius: 50%;
    width: 60px;
    height: 60px;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
</style>

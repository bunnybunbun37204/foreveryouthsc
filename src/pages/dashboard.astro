---
import { app } from "../firebase/server";
import { getAuth } from "firebase-admin/auth";
import Layout from "../layouts/Layout.astro";

const auth = getAuth(app);

/* Check current session */
if (!Astro.cookies.has("__session")) {
  return Astro.redirect("/signin");
}
const sessionCookie = Astro.cookies.get("__session")?.value ?? "";
const decodedCookie = await auth.verifySessionCookie(sessionCookie);
const user = await auth.getUser(decodedCookie.uid);
const uid = user.uid;

if (!user) {
  return Astro.redirect("/signin");
}
---

<Layout title="dashboard">
  <div
    class="min-h-screen flex flex-col items-center justify-center text-yellownivut text-shadow-glow p-8"
  >
    <h1 class="text-6xl md:text-4xl font-normal mb-6 font-sov text-shadow">
      Welcome {user.displayName}
    </h1>
    <p class="text-lg md:text-xl mb-4 font-pk font-bold">We are happy to see you here</p>
    <form
      enctype="multipart/form-data"
      class="w-full max-w-md px-4 py-6 bg-bluenivut rounded shadow-lg"
    >
      <label for="description" class="block text-4xl font-normal font-sov"
        >Message</label
      >
      <input
        type="text"
        id="description"
        name="description"
        class="w-full text-black mt-1 p-2 border border-gray-300 rounded"
      /><br />
      <label for="image" class="block text-4xl font-normal font-sov mt-4"
        >Select image:</label
      >
      <input
        type="file"
        id="image"
        name="image"
        class="w-full mt-1 p-2 rounded"
      /><br />
      <button
        type="submit"
        class="w-full mt-4 p-2 bg-blue01 text-yellownivut font-sov rounded text-3xl hover:bg-blue02"
        >Upload</button
      >
    </form>
    <form action="/api/auth/signout" class="absolute top-4 right-4">
      <button
        type="submit"
        class="p-2 bg-bluenivut text-yellownivut font-pk text-md rounded hover:bg-blue02"
        >Sign out</button
      >
    </form>
    <!-- Loader element -->
    <div
      id="loader"
      class="hidden fixed inset-0 flex items-center justify-center bg-black bg-opacity-50"
    >
      <div class="loader"></div>
    </div>
  </div>
  <div class="hidden" id="uid">{uid}</div>
  <script type="text/javascript">
    document.addEventListener("DOMContentLoaded", () => {
      const uid = document.getElementById("uid");
      const form = document.querySelector("form");
      const imageInput = document.getElementById("image");
      const descriptionInput = document.getElementById("description");
      const loader = document.getElementById("loader");

      function compressImage(file, maxSizeMB, callback) {
        const maxSizeBytes = maxSizeMB * 1024 * 1024;
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = (event) => {
          const img = new Image();
          img.src = event.target.result;
          img.onload = () => {
            const canvas = document.createElement("canvas");
            const ctx = canvas.getContext("2d");

            const ratio = Math.min(1, maxSizeBytes / (img.width * img.height));
            canvas.width = img.width * ratio;
            canvas.height = img.height * ratio;

            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
            const dataUrl = canvas.toDataURL("image/jpeg", 0.8); // Adjust the quality as needed
            callback(dataUrl);
          };
        };
      }

      if (form && imageInput && descriptionInput) {
        form.addEventListener("submit", async (event) => {
          event.preventDefault();

          const description = descriptionInput.value.trim();

          if (
            !description ||
            !imageInput.files ||
            imageInput.files.length === 0
          ) {
            alert("Please fill in all fields.");
            return;
          }

          loader.classList.remove("hidden"); // Show loader

          const imageFile = imageInput.files[0];

          compressImage(imageFile, 4, async (base64Image) => {
            if (!base64Image) {
              alert("Error compressing image file.");
              loader.classList.add("hidden"); // Hide loader on error
              return;
            }

            try {
              const response = await fetch(
                "https://smo-api.bunyawatapp37204.workers.dev/images/upload",
                {
                  method: "PUT",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({
                    body: base64Image.split(",")[1],
                    width: 300,
                    height: 300,
                  }),
                }
              );

              if (!response.ok) {
                throw new Error("Failed to upload image");
              }

              const jsonData = await response.json();
              const img =
                "https://smo-api.bunyawatapp37204.workers.dev/images/" +
                jsonData.key;

              const formData = new FormData();
              formData.append("description", description);
              formData.append("image_url", img); // Submit the image URL instead of the image file

              const result = await fetch(`/api/db/upload/${uid.innerHTML}`, {
                method: "POST",
                body: formData,
              });

              if (!result.ok) {
                throw new Error("Failed to upload data");
              }

              // Redirect or update the UI as needed
              window.location.href = "/view";
            } catch (error) {
              alert("Error uploading data: " + error.message);
            } finally {
              loader.classList.add("hidden"); // Hide loader after submission
            }
          });
        });
      } else {
        console.error("Form elements not found.");
      }
    });
  </script>
</Layout>

<style>
  /* Add loader styles */
  .loader {
    border: 8px solid #f3f3f3; /* Light grey */
    border-top: 8px solid #3498db; /* Blue */
    border-radius: 50%;
    width: 60px;
    height: 60px;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
</style>
